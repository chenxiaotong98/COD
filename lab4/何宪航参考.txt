module ALU_reg_add(
    input clk,
    input reset,
    output [31:0] alu_res
    );
 parameter INIT_Value1 = 32'h0000_0001;
 parameter A_ADD = 5'h01; //·ûºÅ¼Ó
 
 wire [31:0]alu_a;
 wire [31:0]alu_b;
 wire [4:0]alu_op;
 wire [31:0]alu_out;
 wire alu_of;// not used
 
 reg [4:0] r1_addr;
 reg [4:0] r2_addr;
 reg [4:0] r3_addr;
 reg [31:0] r3_din;
 wire  r3_wr;
 wire [31:0] r1_dout;
 wire [31:0] r2_dout;
 
 reg ena;
 wire wea;
 reg [5 : 0] addra; // Write addr
 wire [31 : 0] dina;
 wire rstb;
 reg enb;
 reg [5 : 0] addrb; // Read addr
 wire [31 : 0] doutb;
 integer i;
 reg [1:0]state;
 
 ALU alu32 (
  .alu_a(alu_a), 
  .alu_b(alu_b), 
  .alu_op(alu_op), 
  .alu_out(alu_out), 
  .alu_of(alu_of)
 );
 
 reg_file reg32 (
  clk,
  reset,
  r1_addr,
  r2_addr,
  r3_addr,
  r3_din,
  r3_wr,
  r1_dout,
  r2_dout
 );
 
 Core1 RAM(
  clk,
  ena,
  wea,
  addra,
  dina,
  clk,
  rstb,
  enb,
  addrb,
  doutb
 );
 
 //REG file
 // Wait 100 ns for reset 
 initial 
 begin 
  #100 
  i = 0;
  state = 2'b00;
  r1_addr = 5'b0;
  r2_addr = 5'b0;
 end
  
 
 always@(posedge clk)
 begin
  if(i < 2)
  begin
   case(state)
    2'b00:
    begin
     r3_addr <= i;
     r3_din <= doutb;
     enb <= 1;
     addrb <= i;
    end
    2'b01:
    begin
     r3_din <= doutb;
    end
    2'b10:
    begin
     r3_din <= doutb;
    end
    default:
    begin
     i <= i + 1;
    end
   endcase
  end
  else
  begin
   case(state)
   2'b00:
   begin
    ena <= 0;
    r1_addr <= i - 2;
    r2_addr <= i - 1;
    r3_addr <= i;
    r3_din <= alu_out;
   end
   2'b01:
   begin
    if(i < 32)
     ena <= 1;
    addra <= i;
    r3_din <= alu_out;
    i <= i + 1;
   end
   default:
   begin
    ena <= 0;
    r3_din <= alu_out;
   end
   endcase
  end
 end
 
 always@(posedge clk)
 begin
  if(i < 2)
   state <= state + 2'b01;
  else
   case(state)
   2'b00:
    state <= 2'b01;
   2'b01:
    state <= 2'b00;
   default:
    state <= 2'b01;
   endcase
 end
 
 
 //assign 
 assign r3_wr = (i < 32)?1:0;
 
 //ALU 
 assign alu_a = r1_dout;
 assign alu_b = r2_dout;
 assign alu_op = A_ADD;
 
 //Result
 assign alu_res = alu_out;
 
 //RAM
 assign wea = 1;
 assign rstb = 0;
 assign dina = alu_out;
 
endmodule
